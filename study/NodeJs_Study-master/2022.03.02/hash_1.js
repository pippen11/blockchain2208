// 암호화 중에 단방향 암호화를 배울 것. -> hash
// 암호화하는 방식은 두가지가 있다. -> 양방향과 단방향
// 양방향 -> 암호화 한 방식을 알고 있을 때 복호화를 할 수 있다면 양방향 암호화 
// 암호화된 결과물을 가지고 다시 복호화를 할 수 있을 때 양방향 암호화 방식이라 한다.
// 단방향 -> 복호화가 안되는 암호화 방식을 단방향 암호화라 한다.

// 단방향 암호화에도 여러가지 방법들이 존재. -> hash를 만든다고 한다.
// 단방향 암호화를 하기 위한 여러 방법론들이 많이 존재..
// 우리가 사용할 것은 sha256

// hash : 암호화한 결과의 자릿수가 고정되어 있을 때 hash,
// a -> 암호화를 했을 때 자릿수가 20자리
// sdifnesnfiwin -> 암호화 했을 때 자릿수가 20자리

// crypto 는 기본적으로 node.js가 가지고 있는 라이브러리
const crypto = require('crypto');
// ingoo 라는 text를 sha256으로 해쉬값을 만들고 싶다.
const name = 'ingoo';
const sha256 = crypto.createHash('sha256').update(name).digest('base16');
// name이라는 변수에 있는 값을 sha256 방식을 사용해서 해쉬값으로 만들겠다.
// 내용은 hex 값으로 변환해서 보여줄 것이다.
const sha256_2 = crypto.createHash('sha256').update(name).digest('hex');
console.log('base16 : ', sha256);
console.log(sha256_2);

const name2 = 'ingoo'
const sha256_3 = crypto.createHash('sha256').update(name2).digest('hex');
console.log(sha256_3)
// 보안이 취약합니다.
// 대입으로 해결할 수 있습니다.


// 회원가입을 할 때, 패스워드를 입력하잖아요,, 그 때 DB에 내용을 넣을 때 해쉬로 넣는 겁니다.
// 사용자가 패스워드 1234를 백엔드에 넘겨주면 백엔드는 1234라는 값을 또 해쉬값을 만듭니다.
// DB에 저장된 해쉬와 1234로 해쉬값을 만든 것을 비교해서 true false

// salt 소금 같은 존재,
// 암호화를 할 때 특정한 값을 넣어서 암호화의 값을 바꾸는 것.
// salt 값을 모르면 똑같은 해쉬값을 만들 수 없다.
// 해쉬를 할 때 규칙을 만들어서 
const salt = 'web77221'  // .env 파일에 들어감.

const hash1 = crypto.createHash('sha256').update(name).digest('hex');
const hash2 = crypto.createHmac('sha256', Buffer.from(salt)).update(name).digest('hex');

console.log(hash1, hash2)

// https 는 클라이언트에서 서버로 내용을 보낼 때 내용이 암호화 되어서 보내진다.
// https를 하기 위해서는 도메인이 필요하다.

// 24시간 켜져있는 컴퓨터를 빌려주는 것이 바로 AWS -> 단, 클라우드 시스템을 사용
// 아마존이 한 컴퓨터 안에서 자원을 나눠서 다른 사람에게 빌려주는 개념 (컴퓨터의 메모리를 대여받는 개념)
// 사용자가 필요한 만큼만 자원을 떼서 빌려줌, 사용량만큼 대여 요금을 받는다.

/* *************************************************************************************************** */
// 분산 어플리케이션
// JWT , json web token 
// 제이슨 형태로 데이터를 담아서 웹에서 사용하는 것.
// 왜 필요한가?
// 임시로 서버를 여러대 만들고 필요없으면 지워버리는 방식
// 로그인의 주체가 서버이다보니 서버간의 연결이 필요하게 되는 이슈가 발생,
// 그렇다면 클라이언트가 로그인 정보를 가지고 있게 하자. -> 쿠키에 로그인 정보를 담자.
// 하지만 그렇게 되면 보안 이슈가 발생 -> 그래서 나온 것이 JWT 방식
// 사용하고 싶은 정보를 객체에 담는다. 그리고 그 객체를 해쉬값으로 변환, 해쉬한 값도 객체에 담는다.
// 그 객체를 JWT라고 한다. JWT를 쿠키에 저장. (15분)

// JWT는 내가 사용하고 있는 것이 올바른 JWT인지 검증할 수 있는 사이트가 존재

const hs = crypto.createHmac('sha256', 'web77221').update(name).digest('hex');
console.log(hs)



