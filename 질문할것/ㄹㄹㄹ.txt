
2. 221117reactst 테이블부분에 
콘솔로그찍어보니 이해가잘안됨
값이바뀜?
//tableData[item]들을 tempHead랑 키값 맞춰서 값을 가져옴

if (isHead) {
    return (
      <tr>
        {head.map((item, index) => (
          <th key={index}>{tableData[item]}</th>
        ))}
      </tr>
    );
  }

  return (
    <tr>
      {head.map((item, index) => (
        <TempTd key={index} item={tableData[item]} />
      ))}
    </tr>
  );
}

3. 221121 components addtional부분
렌더링할때 다읽는데 use가 붙어잇는건 한번만 읽는다.
usememo , usecallback질문
const tValue = useMemo(() => {
    return testValue + 10;
  }, [testValue]);
  //[testvalue]값이 변화했을때 변수를 리턴
  // 위의 tValue는 testValue가 변경(재정의)될 때마다 계산되어(+ 10) 정의된다.
  // state와 마찬가지로 tValue가 달라지면 리랜더링이 발생한다.

  const testFunc = useCallback(() => {
    console.log(testValue + 100);
  }, [testValue]);
  //[testvalue]값이 변화했을때 함수 자체를 리턴한다 ]
  // useMemo와 유사하나 함수를 그대로 testFunc에 정의한다.
  // 즉, testFunc는 함수이므로 호출할 때는 testFunc() 로 사용해야한다.
  // useMemo와 마찬가지로 testValue의 값이 변경되었을 때만 재정의한다.

  function testFunc1() {
    console.log(testValue + 100);
  }
  //이건 use안붙어있어서 계속 호출
  // 위와 같이 function 등등으로 함수를 선언했을 때는 리랜더링 될 때마다 함수를 다시 정의한다. useCallback을 사용 시 두번째 매개변수의 상태값이 변화하지 않으면 재정의 하지 않고 있던 것을 사용한다.
  // 즉, 필요 없는 코드의 실행을 막을 수 있기 때문에 최적화 시 사용한다.
  // useMemo 또한 마찬가지로 최적화 시 사용한다.

useEffect(() => {
    ref.current.classList.add("testing");
    console.log(ref.current.classList); // Element에 접근 시 current 프로퍼티로 가져온다.
  }, []);

//밑에 클래스 now-test와 testing같이 출력됨
  //[]로 나두면 한번 실행(componentididmount: 한번실행될때만 실행됨)
  //ref.current는 밑에 리턴 div자체가된다
  // <div
  //     id="now-test"
  //     className="now-test"
  //     style={{ backgroundColor: "red" }}
  //     ref={ref} // 가져올 Element의 ref 속성으로 전달한다.
  //     onClick={() => {
  //       setValue(testValue + 1);
  //       testFunc();
  //     }}
  //   >
  //     {tValue}
  //     {/* useMemo로 정의한 변수 사용 시 일반 변수처럼 가져온다. */}
  //   </div>

이부분 질문 잘모르겠음

4.// 기존에 useEffect를 사용할 경우 어떤 상태(a)의 값이 변화 시 a를 기준으로 다른 상태(b)의 값을 계산하여 정의하는 경우가 있다. (ex. axios를 통한 데이터 받기)
  // state를 따로 정의하지 않고 useMemo를 정의한 변수로 사용할 수 있다.
  
뭔소리인지 질문

5.useParams() 질문, uselLocation은 state로 보내준값 받을때씀?
useParams는 주소값 뒤에꺼 받아올때 쓴다.

6.npm i로 각각설치하고 yarn은못씀?
powershell에서는 yarn 안됨
npm list -g 로 설치된 전역 라이브러리 확인 가능
npm i -g yarn 설치 필요
프로젝트 내에서(package.json이 있는 폴더에서) yarn install 로 node_modules를 설치

1. 배열안에 여러개 객체로 데이터
2.Routes로 감사고 Route써서 path={} element={컴포넌트나 값}
4.const 변수명=styled.div``
(div나 다른태그 가능)
5.map,replace,slice,...
6.이미지 src에 데이터로 넣고 이미지 임포트
7.스타일에 필터로넣어주기가능
8.setting에 정의나 스타일 몰아주고 export만써서 내보내기가능

9. const index = useLocation().state?.index;
  const item = useLocation().state?.item;
  const [taskName, setTaskName] = useState(item ? item.taskName : "");
  const [status, setStatus] = useState(item ? item.status : STATUS.ToDo);
이런식으로 쓰는거 공부 삼항연잔자랑

10.

<input
            type="text"
            placeholder="Task name"
            value={taskName}
            onInput={(e) => {
              setTaskName(e.target.value);
            }}
          ></input>

11.클래스네임도 자유자재로 변하게 가능

12.  <TodoBtn
              onClick={() => {
                if (func === "Add") {
                  setList((state) => [...state, { taskName, status }]);
                } else if (func === "Edit") {
                  setList((list) => {
                    const before = list.slice(0, index);
                    const after = list.slice(index + 1);
                    return [...before, { taskName, status }, ...after];
                  });
                }
              }}
            >
온클릭안에도 이렇게 조건넣어주고 ...으로 복사가능

13onClick={() => {
        item.setNum(item.num - 1);
      }} 이런식으로 바로써주거나

 function increase(e) {
    e.stopPropagation();
    item.setNum(item.num + 1);
  }
이렇게 함수만든다음
<div onClick={increase}>
변수로 넣어줘서 사용가능

14. Link to, state , routes route는 path ,element